version: '3.8'

services:
  # Database
  postgres:
    image: postgres:15-alpine
    container_name: makemelearn_nextjs_db
    environment:
      POSTGRES_DB: makemelearn
      POSTGRES_USER: makemelearn_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-MakeMeLearn2025!SecurePass}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - makemelearn-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U makemelearn_user -d makemelearn"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Next.js Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: makemelearn_nextjs_app
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://makemelearn_user:${POSTGRES_PASSWORD:-MakeMeLearn2025!SecurePass}@postgres:5432/makemelearn
      NEXT_PUBLIC_APP_URL: ${NEXT_PUBLIC_APP_URL:-http://localhost:3000}
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT:-587}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASSWORD: ${SMTP_PASSWORD}
      EMAIL_FROM: ${EMAIL_FROM:-hello@makemelearn.fr}
    ports:
      - "3000:3000"
    networks:
      - makemelearn-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Redis (for caching and rate limiting)
  redis:
    image: redis:7-alpine
    container_name: makemelearn_nextjs_redis
    networks:
      - makemelearn-network
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-MakeMeLearnRedis2025}
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

volumes:
  postgres_data:
    driver: local

networks:
  makemelearn-network:
    driver: bridge
